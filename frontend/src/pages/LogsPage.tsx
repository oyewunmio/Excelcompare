import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { jsPDF } from 'jspdf';
import { Container, Typography, Box, Table, TableHead, TableRow, TableCell, TableBody, IconButton, Button } from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import PrintIcon from '@mui/icons-material/Print';
import { toast } from 'react-toastify';

interface Log {
    id: number;
    username: string;
    log_time: string;
    document_differences: string | null;
    interface: string;
}

const LogsPage: React.FC<{ token: string }> = ({ token }) => {
    const [logs, setLogs] = useState<Log[]>([]);
    const [sortColumn, setSortColumn] = useState<string>('');
    const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');

    useEffect(() => {
        axios
            .get('http://localhost:8000/logs', {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })
            .then((response) => {
                setLogs(response.data);
            })
            .catch((error) => {
                console.error('Error fetching logs', error);
                toast.error('Error fetching logs.');
            });
    }, [token]);

    const handleSort = (column: string) => {
        const direction = sortColumn === column && sortDirection === 'asc' ? 'desc' : 'asc';
        setSortColumn(column);
        setSortDirection(direction);

        const sortedLogs = [...logs].sort((a, b) => {
            if (a[column] < b[column]) return direction === 'asc' ? -1 : 1;
            if (a[column] > b[column]) return direction === 'asc' ? 1 : -1;
            return 0;
        });
        setLogs(sortedLogs);
    };

    const formatDifferences = (differences: string | null) => {
        if (!differences) return '';
        return differences
            .split('\n')
            .map((diff, index) => `${index + 1}. ${diff}`)
            .join('\n\n');
    };

    const generatePDF = (log: Log) => {
        const doc = new jsPDF();
        doc.setFontSize(12);
        doc.text("Excel Comparison Report", 10, 10);
        doc.text(`Report Date: ${new Date(log.log_time).toLocaleString()}`, 10, 20);
        doc.text(`Generated by: ${log.username}`, 10, 30);
        doc.text("Differences:", 10, 40);

        const differences = formatDifferences(log.document_differences).split('\n\n');
        let y = 50;
        differences.forEach((diff: string) => {
            doc.text(diff, 10, y);
            y += 10;
            if (y > 280) {
                doc.addPage();
                y = 10;
            }
        });

        doc.save("comparison_report.pdf");
        toast.success('PDF generated successfully!');
    };

    return (
        <Container>
            <Box display="flex" justifyContent="space-between" alignItems="center" mt={4} mb={4}>
                <Typography variant="h4" color="primary">Logs</Typography>
                <Button variant="contained" color="primary" startIcon={<ArrowBackIcon />} href="/">
                    Back to Compare
                </Button>
            </Box>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell onClick={() => handleSort('username')} style={{ cursor: 'pointer', color: 'rgb(217,34,41)' }}>
                            Username {sortColumn === 'username' && (sortDirection === 'asc' ? '▲' : '▼')}
                        </TableCell>
                        <TableCell onClick={() => handleSort('log_time')} style={{ cursor: 'pointer', color: 'rgb(217,34,41)' }}>
                            Log Time {sortColumn === 'log_time' && (sortDirection === 'asc' ? '▲' : '▼')}
                        </TableCell>
                        <TableCell onClick={() => handleSort('document_differences')} style={{ cursor: 'pointer', color: 'rgb(217,34,41)' }}>
                            Document Differences {sortColumn === 'document_differences' && (sortDirection === 'asc' ? '▲' : '▼')}
                        </TableCell>
                        <TableCell style={{ color: 'rgb(217,34,41)' }}>Interface</TableCell>
                        <TableCell style={{ color: 'rgb(217,34,41)' }}>Actions</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {logs.map((log) => (
                        <TableRow key={log.id}>
                            <TableCell>{log.username}</TableCell>
                            <TableCell>{new Date(log.log_time).toLocaleString()}</TableCell>
                            <TableCell>
                                <pre className="whitespace-pre-wrap">{formatDifferences(log.document_differences)}</pre>
                            </TableCell>
                            <TableCell>{log.interface}</TableCell>
                            <TableCell>
                                {log.document_differences && log.document_differences !== 'No differences found' && (
                                    <IconButton onClick={() => generatePDF(log)} color="primary">
                                        <PrintIcon />
                                    </IconButton>
                                )}
                            </TableCell>
                        </TableRow>
                    ))}
                </TableBody>
            </Table>
        </Container>
    );
};

export default LogsPage;
