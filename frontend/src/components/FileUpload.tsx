import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { jsPDF } from 'jspdf';
import { Box, Button, Typography, Container, Grid, IconButton } from '@mui/material';
import { CloudUpload as CloudUploadIcon, Delete as DeleteIcon } from '@mui/icons-material';
import { toast } from 'react-toastify';

interface FileUploadProps {
    token: string | null;
    shouldCompare: boolean;
    onFileSelected: () => void;
}

const FileUpload: React.FC<FileUploadProps> = ({ token, shouldCompare, onFileSelected }) => {
    const [file1, setFile1] = useState<File | null>(null);
    const [file2, setFile2] = useState<File | null>(null);
    const [differences, setDifferences] = useState<string[]>([]);
    const [reportData, setReportData] = useState<any>(null);

    useEffect(() => {
        if (shouldCompare && file1 && file2) {
            handleFileUpload();
        }
    }, [shouldCompare, file1, file2]);

    const handleFileChange1 = (event: React.ChangeEvent<HTMLInputElement>) => {
        const selectedFile = event.target.files ? event.target.files[0] : null;
        if (selectedFile && (selectedFile.name.endsWith('.csv') || selectedFile.name.endsWith('.xlsx'))) {
            setFile1(selectedFile);
            onFileSelected();
        } else {
            toast.error('Please select a valid CSV or XLSX file.');
        }
    };

    const handleFileChange2 = (event: React.ChangeEvent<HTMLInputElement>) => {
        const selectedFile = event.target.files ? event.target.files[0] : null;
        if (selectedFile && (selectedFile.name.endsWith('.csv') || selectedFile.name.endsWith('.xlsx'))) {
            setFile2(selectedFile);
            onFileSelected();
        } else {
            toast.error('Please select a valid CSV or XLSX file.');
        }
    };

    const handleRemoveFile1 = () => {
        setFile1(null);
    };

    const handleRemoveFile2 = () => {
        setFile2(null);
    };

    const handleFileUpload = async () => {
        if (!file1 || !file2 || !token) {
            toast.error('Please select both files and ensure you are logged in.');
            return;
        }
        const formData = new FormData();
        formData.append('file1', file1);
        formData.append('file2', file2);

        try {
            const response = await axios.post('http://localhost:8000/compare', formData, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'multipart/form-data',
                },
            });
            setDifferences(response.data.differences);
            setReportData(response.data);
            toast.success('Files compared successfully!');
        } catch (error) {
            toast.error('Error comparing files.');
        }
    };

    const formatDifferences = (differences: string | null) => {
        if (!differences) return '';
        return differences
            .split('\n')
            .map((diff, index) => `${index + 1}. ${diff}`)
            .join('\n\n');
    };

    const generatePDF = () => {
        if (!reportData) return;

        const doc = new jsPDF();
        doc.setFontSize(12);
        doc.text("Excel Comparison Report", 10, 10);
        doc.text(`Report Date: ${reportData.timestamp}`, 10, 20);
        doc.text(`Computer Name: ${reportData.computer_name}`, 10, 30);
        doc.text(`Generated by: ${reportData.username}`, 10, 40);
        doc.text("Differences:", 10, 50);

        const differences = formatDifferences(reportData.differences).split('\n\n');
        let y = 60;
        differences.forEach((diff: string) => {
            doc.text(diff, 10, y);
            y += 10;
            if (y > 280) {
                doc.addPage();
                y = 10;
            }
        });

        doc.save("comparison_report.pdf");
        toast.success('PDF generated successfully!');
    };

    return (
        <Container maxWidth="md">
            <Typography variant="h4" align="center" gutterBottom color="primary">
                Upload Files to Compare
            </Typography>
            <Grid container spacing={2}>
                <Grid item xs={12} md={6}>
                    <Box
                        display="flex"
                        flexDirection="column"
                        alignItems="center"
                        justifyContent="center"
                        border={1}
                        borderColor="primary.main"
                        borderRadius={4}
                        p={4}
                        style={{ borderStyle: 'dashed', cursor: 'pointer' }}
                    >
                        <input type="file" onChange={handleFileChange1} style={{ display: 'none' }} id="file-input1" />
                        <label htmlFor="file-input1" style={{ textAlign: 'center' }}>
                            <CloudUploadIcon style={{ fontSize: 48, color: 'rgb(217,34,41)' }} />
                            <Typography variant="body1" color="primary">
                                Upload or <span style={{ textDecoration: 'underline' }}>Browse</span>
                            </Typography>
                        </label>
                        {file1 && (
                            <Box mt={2} display="flex" alignItems="center" justifyContent="space-between" width="100%">
                                <Typography variant="body2">{file1.name} ({(file1.size / 1024).toFixed(2)} KB)</Typography>
                                <IconButton onClick={handleRemoveFile1} color="secondary">
                                    <DeleteIcon />
                                </IconButton>
                            </Box>
                        )}
                    </Box>
                </Grid>
                <Grid item xs={12} md={6}>
                    <Box
                        display="flex"
                        flexDirection="column"
                        alignItems="center"
                        justifyContent="center"
                        border={1}
                        borderColor="primary.main"
                        borderRadius={4}
                        p={4}
                        style={{ borderStyle: 'dashed', cursor: 'pointer' }}
                    >
                        <input type="file" onChange={handleFileChange2} style={{ display: 'none' }} id="file-input2" />
                        <label htmlFor="file-input2" style={{ textAlign: 'center' }}>
                            <CloudUploadIcon style={{ fontSize: 48, color: 'rgb(217,34,41)' }} />
                            <Typography variant="body1" color="primary">
                                Upload or <span style={{ textDecoration: 'underline' }}>Browse</span>
                            </Typography>
                        </label>
                        {file2 && (
                            <Box mt={2} display="flex" alignItems="center" justifyContent="space-between" width="100%">
                                <Typography variant="body2">{file2.name} ({(file2.size / 1024).toFixed(2)} KB)</Typography>
                                <IconButton onClick={handleRemoveFile2} color="secondary">
                                    <DeleteIcon />
                                </IconButton>
                            </Box>
                        )}
                    </Box>
                </Grid>
            </Grid>
            <Box mt={4} display="flex" justifyContent="center">
                <Button
                    variant="contained"
                    color="primary"
                    onClick={handleFileUpload}
                    startIcon={<CloudUploadIcon />}
                    style={{ backgroundColor: 'rgb(217,34,41)' }}
                >
                    Compare
                </Button>
            </Box>
            {differences.length > 0 && (
                <Box mt={4} p={2} border={1} borderColor="primary.main" borderRadius={4}>
                    <Typography variant="h6" gutterBottom>
                        Differences
                    </Typography>
                    <Box className="mb-4 p-4 bg-gray-100 border rounded max-h-64 overflow-y-auto whitespace-pre-wrap">
                        {formatDifferences(differences.join('\n')).split('\n\n').map((diff, index) => (
                            <Typography key={index} variant="body2">{diff}</Typography>
                        ))}
                    </Box>
                    <Button
                        variant="contained"
                        color="secondary"
                        onClick={generatePDF}
                        startIcon={<CloudUploadIcon />}
                    >
                        Generate PDF
                    </Button>
                </Box>
            )}
        </Container>
    );
};

export default FileUpload;
