import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { jsPDF } from 'jspdf';
import { AiOutlineFile, AiOutlineClose } from 'react-icons/ai';

interface FileUploadProps {
    token: string | null;
    shouldCompare: boolean;
    onFileSelected: () => void;
}

const FileUpload: React.FC<FileUploadProps> = ({ token, shouldCompare, onFileSelected }) => {
    const [file1, setFile1] = useState<File | null>(null);
    const [file2, setFile2] = useState<File | null>(null);
    const [differences, setDifferences] = useState<string[]>([]);
    const [reportData, setReportData] = useState<any>(null);

    useEffect(() => {
        if (shouldCompare && file1 && file2) {
            handleFileUpload();
        }
    }, [shouldCompare, file1, file2]);

    const handleFileChange1 = (event: React.ChangeEvent<HTMLInputElement>) => {
        const selectedFile = event.target.files ? event.target.files[0] : null;
        if (selectedFile && (selectedFile.name.endsWith('.csv') || selectedFile.name.endsWith('.xlsx'))) {
            setFile1(selectedFile);
            onFileSelected();
        } else {
            alert('Please select a valid CSV or XLSX file.');
        }
    };

    const handleFileChange2 = (event: React.ChangeEvent<HTMLInputElement>) => {
        const selectedFile = event.target.files ? event.target.files[0] : null;
        if (selectedFile && (selectedFile.name.endsWith('.csv') || selectedFile.name.endsWith('.xlsx'))) {
            setFile2(selectedFile);
            onFileSelected();
        } else {
            alert('Please select a valid CSV or XLSX file.');
        }
    };

    const handleRemoveFile1 = () => {
        setFile1(null);
    };

    const handleRemoveFile2 = () => {
        setFile2(null);
    };

    const handleFileUpload = async () => {
        if (!file1 || !file2 || !token) {
            alert('Please select both files and ensure you are logged in.');
            return;
        }
        const formData = new FormData();
        formData.append('file1', file1);
        formData.append('file2', file2);

        try {
            const response = await axios.post('http://localhost:8000/compare', formData, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'multipart/form-data',
                },
            });
            setDifferences(response.data.differences);
            setReportData(response.data);
        } catch (error) {
            console.error('Error comparing files', error);
        }
    };

    const formatDifferences = (differences: string | null) => {
        if (!differences) return '';
        return differences
            .split('\n')
            .map((diff, index) => `${index + 1}. ${diff}`)
            .join('\n\n');
    };

    const generatePDF = () => {
        if (!reportData) return;

        const doc = new jsPDF();
        doc.setFontSize(12);
        doc.text("Excel Comparison Report", 10, 10);
        doc.text(`Report Date: ${reportData.timestamp}`, 10, 20);
        doc.text(`Computer Name: ${reportData.computer_name}`, 10, 30);
        doc.text(`Generated by: ${reportData.username}`, 10, 40);
        doc.text("Differences:", 10, 50);

        const differences = formatDifferences(reportData.differences).split('\n\n');
        let y = 60;
        differences.forEach((diff: string) => {
            doc.text(diff, 10, y);
            y += 10;
            if (y > 280) {
                doc.addPage();
                y = 10;
            }
        });

        doc.save("comparison_report.pdf");
    };

    return (
        <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100 p-4">
            <form className="bg-white p-6 rounded shadow-md w-full max-w-4xl">
                <h2 className="text-2xl mb-4 text-center font-bold text-blue-600">Upload Files to Compare</h2>
                <div className="flex justify-between mb-4">
                    <div className="w-1/2 mr-2">
                        <label className="block text-center mb-2 font-bold">Original</label>
                        <div className="border-dashed border-2 border-blue-600 p-6 rounded-lg cursor-pointer relative">
                            <input type="file" onChange={handleFileChange1} className="hidden" id="file-input1" />
                            <label htmlFor="file-input1" className="flex flex-col items-center justify-center">
                                <AiOutlineFile className="text-6xl text-blue-600 mb-2" />
                                <span className="text-lg text-blue-600">Upload or <span className="underline">Browse</span></span>
                            </label>
                            {file1 && (
                                <div className="absolute bottom-2 left-2 right-2 bg-white p-2 rounded shadow text-sm text-gray-700 flex items-center justify-between">
                                    <span>{file1.name} ({(file1.size / 1024).toFixed(2)} KB)</span>
                                    <button onClick={handleRemoveFile1} className="ml-2 text-red-600">
                                        <AiOutlineClose />
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                    <div className="w-1/2 ml-2">
                        <label className="block text-center mb-2 font-bold">Compare</label>
                        <div className="border-dashed border-2 border-blue-600 p-6 rounded-lg cursor-pointer relative">
                            <input type="file" onChange={handleFileChange2} className="hidden" id="file-input2" />
                            <label htmlFor="file-input2" className="flex flex-col items-center justify-center">
                                <AiOutlineFile className="text-6xl text-blue-600 mb-2" />
                                <span className="text-lg text-blue-600">Upload or <span className="underline">Browse</span></span>
                            </label>
                            {file2 && (
                                <div className="absolute bottom-2 left-2 right-2 bg-white p-2 rounded shadow text-sm text-gray-700 flex items-center justify-between">
                                    <span>{file2.name} ({(file2.size / 1024).toFixed(2)} KB)</span>
                                    <button onClick={handleRemoveFile2} className="ml-2 text-red-600">
                                        <AiOutlineClose />
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
                <button type="button" onClick={handleFileUpload} className="w-full bg-blue-500 text-white py-2 rounded mt-4">Compare</button>
            </form>
            {differences.length > 0 && (
                <div className="mt-4 bg-white p-6 rounded shadow-md w-full max-w-4xl">
                    <h3 className="text-xl mb-2 font-bold">Differences</h3>
                    <div className="mb-4 p-4 bg-gray-100 border rounded max-h-64 overflow-y-auto whitespace-pre-wrap">
                        {formatDifferences(differences.join('\n')).split('\n\n\n').map((diff, index) => (
                            <p key={index} className="text-sm text-gray-700">{diff}</p>
                        ))}
                    </div>
                    <button onClick={generatePDF} className="w-full bg-green-500 text-white py-2 rounded">Generate PDF</button>
                </div>
            )}
        </div>
    );
};

export default FileUpload;
